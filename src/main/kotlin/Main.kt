/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package me.zhanghai.kotlin.abnf

import java.io.File
import kotlin.system.exitProcess

fun main(args: Array<String>) {
    if (args.size !in 2..3) {
        println("Usage: abnf-kt PACKAGE_NAME CLASS_NAME [FILE]")
        exitProcess(1)
    }
    val packageName = args[0]
    require(packageName.split('.').all { it.isJavaIdentifier() }) {
        "Invalid package name \"$packageName\""
    }
    val className = args[1]
    require(className.isJavaIdentifier()) { "Invalid class name \"$className\"" }
    val file = args.getOrNull(2)

    val lines =
        if (file != null) {
            File(file).readLines()
        } else {
            generateSequence(::readlnOrNull).toList()
        }
    val kdoc =
        """
            |Parser implementation generated by abnf-kt for the ABNF rules below:
            |
            |```
            |${lines.joinToString("\n")}
            |```
        """
            .trimMargin()
    val rules = AbnfParser.parse(lines.joinToString("\r\n", postfix = "\r\n"))
    val parser = ParserGenerator.generate(packageName, className, kdoc, rules)

    print(parser)
}

private fun String.isJavaIdentifier(): Boolean {
    if (isEmpty()) {
        return false
    }
    if (!this[0].isJavaIdentifierStart()) {
        return false
    }
    for (i in 1 ..< length) {
        if (!this[i].isJavaIdentifierPart()) {
            return false
        }
    }
    return true
}
